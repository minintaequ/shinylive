[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n# make this app R-indpendent (shinylive):\r\n# shinylive::export(\"C:/Users/m231037/OneDrive - MerckGroup/Sicherung/Arbeit/R/PoC_Rshiny/shinylive_TTE2a/localVersion\", \"C:/Users/m231037/OneDrive - MerckGroup/Sicherung/Arbeit/R/PoC_Rshiny/shinylive_TTE2a/webRversion\")\r\n# run the R-independent (locally-hosted app by)\r\n# httpuv::runStaticServer(\"C:/Users/m231037/OneDrive - MerckGroup/Sicherung/Arbeit/R/PoC_Rshiny/shinylive_TTE2a/webRversion\")\r\n\r\nlibrary(shiny)\r\nlibrary(plotly)   # loads ggplot2\r\nlibrary(officer)  # \r\nlibrary(reactable)\r\n\r\nPost_TTE2a <- function(hr.irr=0.9, hr.rel=0.7, hr.prom=hr.rel, \r\n                       hr.go=0.5, hr.nogo=0.8, n.events=20, r=1, ...){\r\n    \r\n    Scn <- data.frame(HR.irr=as.numeric(hr.irr), \r\n                      HR.rel=as.numeric(hr.rel), \r\n                      HR.prom=as.numeric(hr.prom),\r\n                      HR.go=as.numeric(hr.go), \r\n                      HR.nogo=as.numeric(hr.nogo), \r\n                      Events=as.numeric(n.events), \r\n                      RR=as.numeric(r))\r\n    w.na <- which(rowSums(is.na(as.matrix(Scn))) > 0)\r\n    if(length(w.na) > 0) Scn <- Scn[-w.na,]\r\n    Scn$Var = (1+Scn$RR)^2/Scn$RR/Scn$Events\r\n    if(nrow(Scn) == 1){\r\n      rownames(Scn) <- c(\"Selected\")\r\n    } else{rownames(Scn) <- c(\"Selected\", paste0(\"Comp\", seq(nrow(Scn)-1)))}\r\n    \r\n    postPless <- function(hr.comp, var){\r\n        force(hr.comp); force(var)\r\n        function(hr) pnorm(log(hr.comp), log(hr), sqrt(var))\r\n    }\r\n    postPmore <- function(hr.comp, var){\r\n        force(hr.comp); force(var)\r\n        function(hr) 1 - pnorm(log(hr.comp), log(hr), sqrt(var))\r\n    }\r\n    stopP <- function(hr.nogo, var){\r\n        force(hr.nogo); force(var)\r\n        function(hr) pnorm(-log(hr.nogo), -log(hr), sqrt(var))\r\n    }\r\n    goP <- function(hr.go, var){\r\n        force(hr.go); force(var)\r\n        function(hr) 1-pnorm(-log(hr.go), -log(hr), sqrt(var))\r\n    }\r\n    grayP <- function(hr.go, hr.nogo, var){\r\n        force(hr.go); force(hr.nogo); force(var)\r\n        if(hr.go == hr.nogo) return(function(hr) rep(0, length(hr)))\r\n        function(hr) \r\n          pnorm(-log(hr.go), -log(hr), sqrt(var)) - pnorm(-log(hr.nogo), -log(hr), sqrt(var))\r\n    }\r\n    \r\n    Fns <- list()\r\n    for(n in rownames(Scn)){\r\n        ws <- which(rownames(Scn) == n)\r\n        Fns[[paste0(n, \".postPirr\")]]  <- postPmore(Scn[ws, \"HR.irr\"], Scn[ws, \"Var\"])\r\n        Fns[[paste0(n, \".postPrel\")]]  <- postPless(Scn[ws, \"HR.rel\"], Scn[ws, \"Var\"])\r\n        Fns[[paste0(n, \".postPprom\")]] <- postPless(Scn[ws, \"HR.prom\"], Scn[ws, \"Var\"])\r\n        Fns[[paste0(n, \".goP\")]]   <- goP(  Scn[ws, \"HR.go\"], Scn[ws, \"Var\"])\r\n        Fns[[paste0(n, \".stopP\")]] <- stopP(Scn[ws, \"HR.nogo\"], Scn[ws, \"Var\"])\r\n        Fns[[paste0(n, \".grayP\")]] <- grayP(Scn[ws, \"HR.go\"], Scn[ws, \"HR.nogo\"], Scn[ws, \"Var\"])\r\n    }\r\n\r\n  return(list(Scenarios=Scn, Functions=Fns))\r\n}\r\n\r\nplotDescProb <- function(ScnObj, hr.lim=c(0,1.2), scn.y.sep=0.2, pl.height=\"600px\", ...){\r\n  # area plot for decisions basded on HR boundaries and true HR\r\n  ScnTab <- ScnObj$Scenarios  # Scenarios Table\r\n  ScnFns <- ScnObj$Function   # list of Probability functions\r\n  pld <- NULL\r\n  for(n in rownames(ScnTab)){\r\n    hr <- sort(unique(c(seq(hr.lim[1], hr.lim[2], by=0.01), ScnTab[n, \"HR.irr\"], ScnTab[n, \"HR.rel\"], ScnTab[n, \"HR.prom\"])))\r\n    df <- data.frame(Label=rep(n,length(hr)))\r\n    for(col in names(ScnTab)) df[[col]] <- rep(ScnTab[which(rownames(ScnTab) == n),col],length(hr))\r\n    df$HR.true = hr\r\n    df$goP <- ScnFns[[paste0(n,\".goP\")]](hr)\r\n    df$stopP <- ScnFns[[paste0(n,\".stopP\")]](hr)\r\n    df$grayP <- ScnFns[[paste0(n,\".grayP\")]](hr)\r\n    df$irrFL <- ifelse(df$HR.true == ScnTab[n, \"HR.irr\"], TRUE, FALSE)\r\n    df$relFL <- ifelse(df$HR.true == ScnTab[n, \"HR.rel\"], TRUE, FALSE)\r\n    df$promFL <- ifelse(df$HR.true == ScnTab[n, \"HR.prom\"], TRUE, FALSE)\r\n    pld <- rbind(pld, df)\r\n  }\r\n  pld$text <- paste0(\"<b>\", gsub(\"Comp\", \"Comparison \", pld$Label), \"<\/b> (e=\",pld$Events, \" \",\r\n                     ifelse(pld$RR >= 1, paste(pld$RR,\"1\",sep=\":\"), paste(\"1\", 1/pld$RR, sep=\":\")), \"):<br>\"\r\n                     )\r\n  pld$goPtext <- paste0(pld$text, \"P(HR.obs < \", pld$HR.go, \" | true HR = <i>\", pld$HR.true,\r\n                        \"<\/i> and \", pld$Events, \" events) = \",\r\n                        format(round(100*pld$goP,1), nsmall=1), \"%<br>\",\r\n                        ifelse(pld$irrFL, \"<br><i>Chosen irrelevant HR!<\/i>\",\r\n                        ifelse(pld$relFL, \"<br><i>Chosen minimal clinically relevant HR!<\/i>\",\r\n                        ifelse(pld$promFL, \"<br><i>Chosen promising HR!<\/i>\", \"\"))))\r\n  pld$stopPtext <- paste0(pld$text, \"<b>P(stop)<\/b> = P(HR.obs > \", pld$HR.nogo, \" | true HR = <i>\", pld$HR.true,\r\n                          \"<\/i> and \", pld$Events, \" events) = \",\r\n                          format(round(100*pld$stopP,1), nsmall=1), \"%<br>\",\r\n                          ifelse(pld$grayP > 0, paste0(\r\n                          \"<b>P(gray)<\/b> = P(\", pld$HR.go, \" < HR.obs < \", pld$HR.nogo, \" | true HR = <i>\",\r\n                          pld$HR.true, \"<\/i> and \", pld$Events, \" events) = \",\r\n                          format(round(100*pld$grayP,1), nsmall=1), \"%<br>\"), \"\"),\r\n                          ifelse(pld$irrFL, \"<br><i>Chosen irrelevant HR!<\/i>\",\r\n                          ifelse(pld$relFL, \"<br><i>Chosen minimal clinically relevant HR!<\/i>\",\r\n                          ifelse(pld$promFL, \"<br><i>Chosen promising HR!<\/i>\", \"\"))))\r\n  titles <- rev(paste0(\"<b>\",gsub(\"Comp\", \"Comparison \", rownames(ScnTab)), \" Scenario:<\/b> \", \r\n                      ScnTab$Events, \" events (\",\r\n                      ifelse(ScnTab$RR >= 1, paste(ScnTab$RR,\"1\",sep=\":\"), paste(\"1\", 1/ScnTab$RR, sep=\":\")),\r\n                      \") HR.prom = \", ScnTab$HR.prom, \" HR.rel = \", ScnTab$HR.rel, \" HR.irr = \", ScnTab$HR.irr,\r\n                      \" | <b>HR.go = \", ScnTab$HR.go, \"; HR.stop = \", ScnTab$HR.nogo, \"<\/b>\"\r\n           ))\r\n  y.zero <- seq(0, nrow(ScnTab)-1)*(1+scn.y.sep)\r\n  names(y.zero) <- rev(rownames(ScnTab))\r\n  cols <- c(go=\"rgba(15,105,175,1)\", stop=\"rgba(235,60,150,1)\")\r\n  fill <- c(go=\"rgba(15,105,175,0.4)\", stop=\"rgba(235,60,150,0.4)\", gray=\"rgba(0,0,0,0.25)\")\r\n  symb <- c(go=\"circle\", stop=\"square\")\r\n\r\n  hrxa <- seq(floor(10*hr.lim[1])/10, ceiling(hr.lim[2]*10)/10, by=0.1)\r\n  xaxl <- list(title = list(text=\"True HR\", font=list(size=16)),\r\n               ticktext = as.list(as.character(hrxa)),\r\n               tickvals = as.list(as.numeric(hrxa)),\r\n               tickmode = \"array\",\r\n               ticks = \"outside\",\r\n               font=list(size=14),\r\n               zeroline = FALSE,\r\n               range = hr.lim,\r\n               gridcolor = toRGB(\"gray80\")\r\n  )\r\n  prya <- rep(seq(0, 1, by=0.1),length(y.zero)) + rep(y.zero, each=11)\r\n  names(prya) <- rep(seq(0, 1, by=0.1)*100,length(y.zero))\r\n  yaxl <- list(title = list(text=\"Decision Probabilities (%)\", font=list(size=16)),\r\n               ticktext = as.list(as.character(names(prya))),\r\n               tickvals = as.list(as.numeric(prya)),\r\n               tickmode = \"array\",\r\n               ticks = \"outside\",\r\n               font=list(size=14),\r\n               zeroline = TRUE,\r\n               gridcolor = toRGB(\"gray80\")\r\n  )\r\n  anno <-  list(\r\n      x = rep(mean(hr.lim), length(y.zero)),\r\n      y = y.zero+1.075,\r\n      text = titles,\r\n      xref = \"x\",\r\n      yref = \"y\",\r\n      showarrow = FALSE,\r\n      font = list(color = 'black',\r\n                  size = 14)\r\n  )\r\n  leg <- list(orientation = 'h', x=0.1, y=-.1, font=list(size=14))\r\n    \r\n  p <- plot_ly(type=\"scatter\", mode=\"lines+markers\")\r\n  lgnd <- TRUE\r\n  for(l in unique(pld$Label)){\r\n    pdl <- pld[which(pld$Label == l),]\r\n    pdl$plotX <- pdl$HR.true\r\n    pdl$plotYgo <- as.numeric(pdl[[\"goP\"]]) + as.numeric(y.zero[pdl$Label])\r\n    pdl$plotYstop <- 1 - as.numeric(pdl[[\"stopP\"]]) + as.numeric(y.zero[pdl$Label])      \r\n    wm <- which(rowSums(pdl[,c(\"irrFL\", \"promFL\", \"relFL\")]) > 0)\r\n    # line for stop\r\n    p <- add_trace(p, x=hr.lim, y=c(1,1)+as.numeric(y.zero[l]), legendgroup=\"P(stop)\", name = \"P(stop)\",\r\n                   showlegend=FALSE, hoverinfo=\"none\", line=list(width=0), mode=\"lines\", legendgroup=\"P(stop)\")\r\n    p <- add_trace(p, data=pdl, x = ~plotX, y = ~plotYstop, legendgroup=\"P(stop)\", name = \"P(stop)\", mode=\"lines\",\r\n                   showlegend=lgnd, mode = 'lines', color=I(cols[\"stop\"]), hoverinfo=\"text\", text=~I(stopPtext),\r\n                   fill='tonexty', fillcolor=fill[\"stop\"],\r\n                   hovertemplate = paste0('%{text}',paste0(\"<extra><\/extra>\")))\r\n    # gray zone\r\n    p <-  add_trace(p, data=pdl, x = ~plotX, y = ~plotYgo, legendgroup=\"P(gray)\", name = \"P(gray)\",\r\n                    fill='tonexty', fillcolor=fill[\"gray\"],\r\n                    showlegend=lgnd, hoverinfo=\"none\", line=list(width=0), mode=\"lines\")\r\n    # line for go\r\n    p <- add_trace(p, data=pdl, x = ~plotX, y = ~plotYgo, legendgroup=\"P(go)\", name = \"P(go)\", mode=\"lines\",\r\n                   showlegend=lgnd, mode = 'lines', color=I(cols[\"go\"]), hoverinfo=\"text\", text=~I(goPtext),\r\n                   hovertemplate = paste0('%{text}',paste0(\"<extra><\/extra>\")))\r\n    # go zone \r\n    p <- add_trace(p, x=hr.lim, y=rep(as.numeric(y.zero[l]),2), fill='tonexty', fillcolor=fill[\"go\"],\r\n                   showlegend=FALSE, hoverinfo=\"none\", line=list(width=0), mode=\"lines\",\r\n                   legendgroup=\"P(go)\", name = \"P(go)\")      \r\n    # marker\r\n    p <- add_trace(p, data=pdl[wm,], x = ~plotX, y = ~plotYstop, legendgroup=\"P(stop)\", name = \"P(stop)\",\r\n                   showlegend=FALSE, mode=\"markers\", hoverinfo=\"text\", text=~I(stopPtext),\r\n                   marker=list(size=10, color=cols[\"stop\"], symbol=symb[\"stop\"]))\r\n    p <- add_trace(p, data=pdl[wm,], x = ~plotX, y = ~plotYgo, legendgroup=\"P(go)\", name = \"P(go)\",\r\n                   showlegend=FALSE, mode=\"markers\", hoverinfo=\"text\", text=~I(goPtext),\r\n                   marker=list(size=10, color=cols[\"go\"], symbol=symb[\"go\"]))    \r\n    lgnd <- FALSE\r\n  }\r\n  p <- layout(p, xaxis=xaxl, yaxis=yaxl, annotations = anno, legend=leg)\r\n  p  \r\n}\r\n\r\nplotPostProb <- function(ScnObj, hr.lim=c(0,1.2), scn.y.sep=0.2, pl.height=\"600px\", ...){\r\n  ScnTab <- ScnObj$Scenarios\r\n  pld <- NULL\r\n  for(n in rownames(ScnTab)){\r\n    hr <- sort(unique(c(seq(hr.lim[1], hr.lim[2], by=0.01), ScnTab[n, \"HR.go\"], ScnTab[n, \"HR.nogo\"])))\r\n    df <- data.frame(Label=rep(n,length(hr)))\r\n    for(col in names(ScnTab)) df[[col]] <- rep(ScnTab[which(rownames(ScnTab) == n),col],length(hr))\r\n    df$HR.obs = hr\r\n    df$postPirr <- ScnObj$Function[[paste0(n,\".postPirr\")]](hr)\r\n    df$postPrel <- ScnObj$Function[[paste0(n,\".postPrel\")]](hr)\r\n    df$postPprom <- ScnObj$Function[[paste0(n,\".postPprom\")]](hr)\r\n    df$goFL <- ifelse(df$HR.obs == ScnTab[n, \"HR.go\"], TRUE, FALSE)\r\n    df$stopFL <- ifelse(df$HR.obs == ScnTab[n, \"HR.nogo\"], TRUE, FALSE)\r\n    pld <- rbind(pld, df)\r\n  }\r\n  pld$text <- paste0(\"<b>\", gsub(\"Comp\", \"Comparison \", pld$Label), \"<\/b> (e=\",pld$Events, \" \",\r\n                     ifelse(pld$RR >= 1, paste(pld$RR,\"1\",sep=\":\"), paste(\"1\", 1/pld$RR, sep=\":\")), \"):<br>\"\r\n                     )\r\n  pld$postPirrText <- paste0(pld$text, \"P(HR > \", pld$HR.irr, \" | observed HR =\", pld$HR.obs, \" from \", pld$Events, \" events) = \",\r\n                             format(round(100*pld$postPirr,1), nsmall=1), \"%\", ifelse(pld$stopFL, \"<br><i>Chosen Stop Boundary!<\/i>\", \"\"))\r\n  pld$postPrelText <- paste0(pld$text, \"P(HR < \", pld$HR.rel, \" | observed HR =\", pld$HR.obs, \" from \", pld$Events, \" events) = \",\r\n                             format(round(100*pld$postPrel,1), nsmall=1), \"%\", ifelse(pld$goFL, \"<br><i>Chosen Go Boundary!<\/i>\", \"\"))\r\n  pld$postPpromText <- paste0(pld$text, \"P(HR < \", pld$HR.prom, \" | observed HR =\", pld$HR.obs, \" from \", pld$Events, \" events) = \",\r\n                             format(round(100*pld$postPprom,1), nsmall=1), \"%\", ifelse(pld$goFL, \"<br><i>Chosen Go Boundary!<\/i>\", \"\"))\r\n  \r\n  titles <- rev(paste0(\"<b>\",gsub(\"Comp\", \"Comparison \", rownames(ScnTab)), \" Scenario:<\/b> \", \r\n                   ScnTab$Events, \" events (\",\r\n                   ifelse(ScnTab$RR >= 1, paste(ScnTab$RR,\"1\",sep=\":\"), paste(\"1\", 1/ScnTab$RR, sep=\":\")),\r\n                   \") HR.prom = \", ScnTab$HR.prom, \" HR.rel = \", ScnTab$HR.rel, \" HR.irr = \", ScnTab$HR.irr,\r\n                   \" | <b>HR.go = \", ScnTab$HR.go, \"; HR.stop = \", ScnTab$HR.nogo, \"<\/b>\"\r\n            ))\r\n  y.zero <- seq(0, nrow(ScnTab)-1)*(1+scn.y.sep)\r\n  names(y.zero) <- rev(rownames(ScnTab))\r\n  cols <- c(postPprom=\"rgba(20,155,95,1)\", postPrel=\"rgba(15,105,175,1)\", postPirr=\"rgba(235,60,150,1)\")\r\n  symb <- c(postPprom=\"circle\", postPrel=\"circle\", postPirr=\"square\")\r\n\r\n  hrxa <- seq(floor(10*hr.lim[1])/10, ceiling(hr.lim[2]*10)/10, by=0.1)\r\n  xaxl <- list(title = list(text=\"Observed HR\", font=list(size=16)),\r\n               ticktext = as.list(as.character(hrxa)),\r\n               tickvals = as.list(as.numeric(hrxa)),\r\n               tickmode = \"array\",\r\n               ticks = \"outside\",\r\n               font=list(size=14),\r\n               zeroline = FALSE,\r\n               range = hr.lim,\r\n               gridcolor = toRGB(\"gray80\")\r\n  )\r\n  prya <- rep(seq(0, 1, by=0.1),length(y.zero)) + rep(y.zero, each=11)\r\n  names(prya) <- rep(seq(0, 1, by=0.1)*100,length(y.zero))\r\n  yaxl <- list(title = list(text=\"Posterior Probabilities (%)\", font=list(size=16)),\r\n               ticktext = as.list(as.character(names(prya))),\r\n               tickvals = as.list(as.numeric(prya)),\r\n               tickmode = \"array\",\r\n               ticks = \"outside\",\r\n               font=list(size=14),\r\n               zeroline = TRUE,\r\n               gridcolor = toRGB(\"gray80\")\r\n  )\r\n  anno <-  list(\r\n      x = rep(mean(hr.lim), length(y.zero)),\r\n      y = y.zero+1.075,\r\n      text = titles,\r\n      xref = \"x\",\r\n      yref = \"y\",\r\n      showarrow = FALSE,\r\n      font = list(color = 'black',\r\n                  size = 14)\r\n  )\r\n  leg <- list(orientation = 'h', x=0.1, y=-.1, font=list(size=14))\r\n  \r\n  p <- plot_ly(type=\"scatter\", mode=\"lines+markers\")\r\n  for(tp in c(\"postPrel\", \"postPprom\", \"postPirr\")){\r\n    pd <- pld[c(\"Label\",\"HR.obs\", \"goFL\", \"stopFL\")]\r\n    pd$plotX <- pd$HR.obs\r\n    pd$plotY <- as.numeric(pld[[tp]] + y.zero[pd$Label])\r\n    pd$text <- as.character(pld[[paste0(tp,\"Text\")]])\r\n    name=paste0(\"P(HR\", ifelse(tp==\"postPirr\", \" > HR.irr\", ifelse(tp==\"postPrel\", \" < HR.rel\", \" < HR.prom\")),\r\n                \" | HR.obs on n.events)\")\r\n    lgnd <- TRUE\r\n    for(l in unique(pd$Label)){\r\n      pdl <- pd[which(pd$Label == l),]\r\n      wm <- which(pdl[[ifelse(tp==\"postPirr\", \"stopFL\", \"goFL\")]])\r\n      p <- add_trace(p, data=pdl[wm,], x = ~plotX, y = ~plotY, legendgroup=name, name = name,\r\n                     showlegend=FALSE, mode=\"markers\", hoverinfo=\"text\", text=~I(text),\r\n                     marker=list(size=10, color=cols[tp], symbol=symb[tp]))\r\n      p <- add_trace(p, data=pdl, x = ~plotX, y = ~plotY, legendgroup=name, name = name, mode=\"lines\",\r\n                     showlegend=lgnd, mode = 'lines', color=I(cols[tp]), hoverinfo=\"text\", text=~I(text),\r\n                     hovertemplate = paste0('%{text}',paste0(\"<extra><\/extra>\")))\r\n      lgnd <- FALSE\r\n    }\r\n  }\r\n  p <- layout(p, xaxis=xaxl, yaxis=yaxl, annotations = anno, legend=leg)\r\n  p\r\n}\r\n\r\ntableDescProb <- function(ScnObj, ...){\r\n  ScnTab <- ScnObj$Scenarios  # Scenarios Table\r\n  ScnFns <- ScnObj$Function   # list of Probability functions\r\n  ScnTab$Goirr <- rep(NA, nrow(ScnTab))\r\n  ScnTab$Stopprom <- rep(NA, nrow(ScnTab))\r\n  ScnTab$Grayprom <- rep(NA, nrow(ScnTab))\r\n  ScnTab$Grayirr <- rep(NA, nrow(ScnTab))\r\n  ScnTab$Stopirr <- rep(NA, nrow(ScnTab))\r\n  ScnTab$Goprom <- rep(NA, nrow(ScnTab))\r\n  for(i in rownames(ScnTab)){\r\n    for(j in colnames(ScnTab)[-(1:8)]){\r\n      if(grepl(\"Go\", j)) Pfun <- ScnFns[[paste(i,\"goP\",sep=\".\")]]\r\n      if(grepl(\"Gray\", j)) Pfun <- ScnFns[[paste(i,\"grayP\",sep=\".\")]]\r\n      if(grepl(\"Stop\", j)) Pfun <- ScnFns[[paste(i,\"stopP\",sep=\".\")]]\r\n      hreval <- ScnTab[i,ifelse(grepl(\"irr\", j), \"HR.irr\", ifelse(grepl(\"prom\", j), \"HR.prom\", \"HR.rel\"))]\r\n      ScnTab[i,j] <- Pfun(hreval)\r\n    }\r\n  }\r\n  incl.gray <- any(ScnTab$Grayprom > 0.001) | any(ScnTab$Grayirr > 0.001)\r\n  head <- NULL\r\n  if(any(ScnTab$RR != ScnTab$RR[1]))\r\n      head <- rbind(head, c(\"Randomization Ratio:\",\r\n                            ifelse(ScnTab$RR >= 1, paste(ScnTab$RR, 1, sep=\":\"),\r\n                                   paste(1, 1/ScnTab$RR, sep=\":\"))))\r\n  if(any(ScnTab$Events != ScnTab$Events[1]))\r\n      head <- rbind(head, c(\"Events collected:\", ScnTab$Events))\r\n  if(any(ScnTab$HR.nogo != ScnTab$HR.nogo[1]) | any(ScnTab$HR.nogo - ScnTab$HR.go > 0))\r\n      head <- rbind(head, c(\"Stop criterion: HR >\", ScnTab$HR.nogo))\r\n  head <- rbind(head, c(\"Go criterion: HR <\", ScnTab$HR.go))      \r\n\r\n  body <- cbind(c(paste(\"False GO, if true HR =\", mean(ScnTab$HR.irr)),\r\n                  paste(\"False STOP, if true HR =\", mean(ScnTab$HR.prom)),\r\n                  paste(\"Gray Zone, if true HR =\", mean(ScnTab$HR.irr)),\r\n                  paste(\"Gray Zone, if true HR =\", mean(ScnTab$HR.prom)),\r\n                  paste(\"Correct STOP at true HR =\", mean(ScnTab$HR.irr)),\r\n                  paste(\"Correct GO at true HR =\", mean(ScnTab$HR.prom))),\r\n                matrix(paste0(format(round(unlist(100*ScnTab[,\r\n                      c(\"Goirr\", \"Stopprom\", \"Grayprom\", \"Grayirr\", \"Stopirr\", \"Goprom\")]),\r\n                      1),nsmall=1),\"%\"), ncol=nrow(ScnTab), byrow=TRUE)\r\n                )\r\n  if(!incl.gray) body <- body[-(3:4),]\r\n\r\n  df <- data.frame(body)\r\n  #names(df) <- c(\"Description\", rownames(ScnTab))\r\n  names(df) <- apply(head, 2, paste, collapse=\"<br>\")\r\n  ## ft <- flextable(df)\r\n  ## ft <- delete_part(ft, part = \"header\")\r\n  ## if(nrow(head) > 0){\r\n  ##     for(i in 1:nrow(head)) ft <- add_header_row(ft, values = head[i,])\r\n  ## }\r\n  ## ft <- bold(ft, part=\"header\")\r\n  ## ft <- color(ft, color=\"white\", part=\"header\")\r\n\r\n  ## ft <- bg(ft, bg = rgb(80,51,144, maxColorValue=255), part = \"header\")\r\n  ## ft <- bg(ft, i = 1:2, bg = rgb(255,204,204, maxColorValue=255), part = \"body\")\r\n  ## if(incl.gray){\r\n  ##   ft <- bg(ft, i = 3:4, bg = rgb(217,217,217, maxColorValue=255), part = \"body\")\r\n  ##   ft <- bg(ft, i = 5:6, bg = rgb(204,255,204, maxColorValue=255), part = \"body\")  \r\n  ## } else{\r\n  ##   ft <- bg(ft, i = 3:4, bg = rgb(204,255,204, maxColorValue=255), part = \"body\")\r\n  ## }\r\n  ## ft <- border_remove(ft)\r\n  ## ft <- hline_bottom(ft, border = fp_border(color=\"black\", width = 2))\r\n  ## ft <- hline_top(ft, border = fp_border(color=\"black\", width = 2), part = \"all\")\r\n  ## ft <- hline_top(ft, border = fp_border(color=\"gray\", width = 1), part = \"body\")\r\n  ## ft <- width(ft, j=1, width=2.8)\r\n  ## ft <- width(ft, j=2:ncol(df), width=3.6/(ncol(df)-1))\r\n  ## ft <- align(ft, j=2:ncol(df), align=\"right\", part=\"all\")\r\n  ## ft\r\n  reactable(df, defaultColDef=colDef(html=TRUE))\r\n}\r\n\r\nggPostProb <- function(ScnObj, hr.lim=c(0,1.2), ...){\r\n  ## ggplot of the selected Scenario posterior probability for relevant HR\r\n  ScnTab <- ScnObj$Scenarios[\"Selected\",]\r\n  ScnFun <- ScnObj$Functions$Selected.postPrel  \r\n  pld <- data.frame(hr = seq(hr.lim[1], hr.lim[2], 0.01))\r\n  pld$pP <- ScnFun(pld$hr)\r\n  xbk <- seq(floor(hr.lim[1]*10)/10, ceiling(hr.lim[2]*10)/10, 0.1)\r\n  wel <- which(abs(xbk - ScnTab$HR.go) < 0.05)\r\n  if(length(wel) > 0)  \r\n  xbk <- xbk[-wel]\r\n  wel <- which(abs(xbk - ScnTab$HR.nogo) < 0.05)\r\n  if(length(wel) > 0)  \r\n  xbk <- xbk[-wel]\r\n  xbk <- sort(unique(c(ScnTab$HR.go, ScnTab$HR.nogo, xbk)))\r\n  gg <- ggplot(pld, aes(x=hr, y=pP)) + coord_cartesian(xlim=hr.lim, ylim=c(0,1)) +\r\n        scale_x_continuous(limits = hr.lim, breaks=xbk)\r\n  gg <- gg + geom_rect(xmin=hr.lim[1], xmax=ScnTab[[\"HR.go\"]], \r\n                       ymin=ScnFun(as.numeric(ScnTab[\"HR.go\"])), ymax=1,\r\n                       fill=rgb(204,255,204, maxColorValue=255))\r\n  pd <- data.frame(hr = ScnTab[[\"HR.go\"]], pP=ScnFun(as.numeric(ScnTab[\"HR.go\"])))    \r\n  if(ScnTab[[\"HR.go\"]] != ScnTab[[\"HR.nogo\"]]){\r\n  gg <- gg + geom_rect(xmin=ScnTab[[\"HR.go\"]], xmax=ScnTab[[\"HR.nogo\"]], \r\n                       ymin=ScnFun(as.numeric(ScnTab[\"HR.nogo\"])),\r\n                       ymax=ScnFun(as.numeric(ScnTab[\"HR.go\"])),\r\n                       fill=rgb(217,217,217, maxColorValue=255))\r\n  pd <- rbind(pd, data.frame(hr = ScnTab[[\"HR.nogo\"]], pP=ScnFun(as.numeric(ScnTab[\"HR.nogo\"]))))\r\n  }    \r\n  gg <- gg + geom_rect(xmin=ScnTab[[\"HR.nogo\"]], xmax=hr.lim[2], \r\n                       ymin=0, ymax=ScnFun(as.numeric(ScnTab[\"HR.nogo\"])),\r\n                       fill=rgb(255,204,204, maxColorValue=255))\r\n  pd$text <- paste0(format(round(pd$pP*100, 1), nsmall=1), \"%\")\r\n  gg <- gg + geom_line(color=rgb(15,105,175, maxColorValue=255))\r\n  gg <- gg + geom_point(data=pd, aes(x=hr, y=pP), color=rgb(15,105,175, maxColorValue=255), size=2)\r\n  gg <- gg + annotate(\"text\", x=pd$hr, y=pd$pP, label=pd$text, hjust=-0.2, size=5,\r\n                      color=rgb(15,105,175,maxColorValue=255))\r\n  gg <- gg + labs(x=bquote(paste(\"Observed Hazard Ratio \", HR[obs], \", \", n[events], \" = \", .(ScnTab$Events))),\r\n                  y=bquote(paste(\"P(\", HR[true] <= .(ScnTab$HR.rel), \" | \", HR[obs], \", \",\r\n                                 n[events], \" = \", .(ScnTab$Events), \")\"))) + theme_classic(base_size=14)    \r\n  gg\r\n}\r\n\r\npptxSumm <- function(ScnObj, templ=myppt, file=\"TTE2a_standard_slide.pptx\",\r\n                     title=\"Placeholder\", tabFun=tableDescProb, graphFun=ggPostProb, ...){\r\n    ## myppt <- read_pptx(\"template_TTE2a.pptx\")\r\n  ScnTab <- ScnObj$Scenarios[\"Selected\",]\r\n  ggp <- graphFun(ScnObj, ...)\r\n  mst <- layout_summary(templ)[[2]][1]    # used master (for layouts)\r\n  lay <- layout_summary(templ)[[1]]       # available layouts (for slides)\r\n    if(\"POS_TTE2a\" %in% lay){    \r\n      lpt <- layout_properties(templ, layout = \"POS_TTE2a\", master = mst)\r\n      ## element labels\r\n      titlelabel <- \"Title 1\"\r\n      recomlabel <- \"Text Placeholder 19\"\r\n      assumlabel <- \"Text Placeholder 21\"\r\n      chartlabel <- \"Chart Placeholder 37\"\r\n      tablelabel <- \"Table Placeholder 41\"\r\n      ## content\r\n      ppt <- add_slide(templ, layout=\"POS_TTE2a\", master=mst)\r\n      ppt <- ph_with(ppt, value = title, location = ph_location_label(ph_label = titlelabel))\r\n      ppt <- ph_with(ppt, value = paste0(\"Go: HR < \", ScnTab[[\"HR.go\"]], \" (\",\r\n                                           ScnTab[[\"Events\"]],\r\n                                           \" events)\\nStop: HR > \", ScnTab[[\"HR.nogo\"]]),\r\n                     location = ph_location_label(ph_label = recomlabel))\r\n      ppt <- ph_with(ppt, value = paste0(\"Relevant effect / promising effect: HR < \",\r\n                                         ScnTab[[\"HR.prom\"]],\r\n                                         \"\\nMinimal clinically relevant effect: HR < \",\r\n                                         ScnTab[[\"HR.rel\"]],\r\n                                         \"\\nClinically non-relevant effect: HR > \",\r\n                                         ScnTab[[\"HR.irr\"]]),\r\n                     location = ph_location_label(ph_label = assumlabel))\r\n      ppt <- ph_with(ppt, value = tabFun(ScnObj, ...),\r\n                     location = ph_location_label(ph_label = tablelabel))\r\n      ppt <- ph_with(ppt, value = ggp,\r\n                     location = ph_location_label(ph_label = chartlabel))      \r\n      print(ppt, target=file)\r\n} else{warning(\"Unknown template provided, no file created!\")}\r\n  \r\n}\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n    # Application title\r\n    titlePanel(\"Interactive evaluation of operating characteristics for planning 2-arm TTE studies\"),\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"EvtsMain\",\r\n                        \"Number events:\",\r\n                        min = 6,\r\n                        max = 600,\r\n                        value = 50),\r\n            selectInput(\"randrat\", \"Randomization Ratio (RR)\", \r\n                        choices = list(\"1:1\" = 1, \"2:1\" = 2,\r\n                                       \"3:1\" = 3, \"1:2\" = 0.5), selected = 1),\r\n            sliderInput(\"HRpromirr\", \r\n                        \"Promising and Irrelevant hazard ratio (HR):\",\r\n                        min = 0.0, max = 1.0, value = c(0.5, 0.8)),\r\n            sliderInput(\"HRminrel\",\r\n                        \"Minimal clinically relevant HR:\",\r\n                        min = 0.4,\r\n                        max = 0.8,\r\n                        value = 0.7),\r\n            sliderInput(\"HRgostopMain\",\r\n                        \"Go / No-Go boundaries (HR):\",\r\n                        min = 0.1,\r\n                        max = 1.1,\r\n                        value = c(0.6,0.6)),\r\n            sliderInput(\"HRlim\", \r\n                        \"Plot range for hazard ratio (HR):\",\r\n                        min = 0.0, max = 3.5, value = c(0.25, 1.2)),\r\n            checkboxInput(\"compopt\", \"Compare to other inputs\", value = FALSE),\r\n            conditionalPanel(\r\n                condition = \"input.compopt == true\",\r\n                splitLayout(cellWidths = c(\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"),\r\n                  numericInput(\"E1\", \"Events 1\", min=6, max=600, value=NA),\r\n                  numericInput(\"E2\", \"Events 2\", min=6, max=600, value=NA),\r\n                  numericInput(\"E3\", \"Events 3\", min=6, max=600, value=NA),\r\n                  numericInput(\"E4\", \"Events 4\", min=6, max=600, value=NA),\r\n                  numericInput(\"E5\", \"Events 5\", min=6, max=600, value=NA)),\r\n                splitLayout(cellWidths = c(\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"),\r\n                  numericInput(\"G1\", \"Go HR 1\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"G2\", \"Go HR 2\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"G3\", \"Go HR 3\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"G4\", \"Go HR 4\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"G5\", \"Go HR 5\", min=0.0, max=1.0, value=NA)),\r\n                splitLayout(cellWidths = c(\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"),\r\n                  numericInput(\"S1\", \"Stop HR 1\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"S2\", \"Stop HR 2\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"S3\", \"Stop HR 3\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"S4\", \"Stop HR 4\", min=0.0, max=1.0, value=NA),\r\n                  numericInput(\"S5\", \"Stop HR 5\", min=0.0, max=1.0, value=NA)),\r\n                splitLayout(cellWidths = c(\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"),\r\n                  selectInput(\"rr1\", \"RR 1\", \r\n                              choices = list(\"1:1\" = 1, \"2:1\" = 2, \"3:1\" = 3, \"1:2\" = 0.5), selected = 1),\r\n                  selectInput(\"rr2\", \"RR 2\", \r\n                              choices = list(\"1:1\" = 1, \"2:1\" = 2, \"3:1\" = 3, \"1:2\" = 0.5), selected = 1),\r\n                  selectInput(\"rr3\", \"RR 3\", \r\n                              choices = list(\"1:1\" = 1, \"2:1\" = 2, \"3:1\" = 3, \"1:2\" = 0.5), selected = 1),\r\n                  selectInput(\"rr4\", \"RR 4\", \r\n                              choices = list(\"1:1\" = 1, \"2:1\" = 2, \"3:1\" = 3, \"1:2\" = 0.5), selected = 1),\r\n                  selectInput(\"rr5\", \"RR 5\", \r\n                              choices = list(\"1:1\" = 1, \"2:1\" = 2, \"3:1\" = 3, \"1:2\" = 0.5), selected = 1))\r\n            )\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n            tabsetPanel(\r\n                id = \"tabsetMain\",\r\n                tabPanel(\"Theory\",                         \r\n                  withMathJax(),\r\n                  h2(\"Calculation for Go / No Go design in a 2-arm time-to-event RCT\"),\r\n                  tagList(\"All calculations are done as described below and corresponding to the specifications provided in the \", a(\"Msamplesize library.\", href=\"https://evarooms.merckgroup.com/Topic/Statcom/R%20Documents/Msamplesize_vignette.pdf\", target=\"_blank\")),\r\n                  h3(\"Input / Given by team alignment\"),\r\n                  helpText(\"Relevant effect / Promising effect (hazard ratio): \\\\(\\\\text{hr}_{\\\\text{prom}}\\\\) (e.g. 0.4)\"),\r\n                  helpText(\"Minimal clinically relevant effect (hazard ratio): \\\\(\\\\text{hr}_{\\\\text{rel}}\\\\) (e.g. 0.7)\"),\r\n                  helpText(\"Minimal clinically irrelevant effect (hazard ratio): \\\\(\\\\text{hr}_{\\\\text{irr}}\\\\) (e.g. 0.9)\"),\r\n                  h3(\"and reasonably selected design paramers\"),\r\n                  helpText(\"Number of events: \\\\(n_\\\\text{events}\\\\) (e.g. 40)\"),\r\n                  helpText(\"Randomization ratio: \\\\(r\\\\) (e.g. 1 for 1:1 or 2 for 2:1)\"),\r\n                  helpText(\"Hazard ratio boundary for go to next phase: \\\\(\\\\text{hr}_{\\\\text{go}}\\\\) (e.g. 0.6)\"),\r\n                  helpText(\"Hazard ratio boundary for stopping the development: \\\\(\\\\text{hr}_{\\\\text{stop}}\\\\) (e.g. 1.0)\"),\r\n                  h3(\"allow to calculate operational characteristics as\"),\r\n                  helpText(\"Posterior Probabilty to have an at most as high true hazard ratio (\\\\(\\\\text{HR}_{\\\\text{true}}\\\\)) as would be clincically relevant, given the observed hazard ratio (\\\\(\\\\text{hr}_{\\\\text{obs}}\\\\)) based on \\\\(n_{\\\\text{events}}\\\\) events: \\\\[P(\\\\text{HR}_\\\\text{true} < \\\\text{hr}_{\\\\text{rel}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{obs}}) = P\\\\bigl(\\\\log(\\\\text{HR}_\\\\text{true}) < \\\\log(\\\\text{hr}_\\\\text{rel})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{true})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{obs}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  helpText(\"Posterior Probabilty to have an at most as high true hazard ratio (\\\\(\\\\text{HR}_{\\\\text{true}}\\\\)) as would be clincically promising, given the observed hazard ratio (\\\\(\\\\text{hr}_{\\\\text{obs}}\\\\)) based on \\\\(n_{\\\\text{events}}\\\\) events: \\\\[P(\\\\text{HR}_\\\\text{true} < \\\\text{hr}_{\\\\text{prom}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{obs}}) = P\\\\bigl(\\\\log(\\\\text{HR}_\\\\text{true}) < \\\\log(\\\\text{hr}_\\\\text{prom})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{true})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{obs}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  helpText(\"Posterior Probabilty to have an at least as high true hazard ratio (\\\\(\\\\text{HR}_{\\\\text{true}}\\\\)) as would be clincically irrelevant, given the observed hazard ratio (\\\\(\\\\text{hr}_{\\\\text{obs}}\\\\)) based on \\\\(n_{\\\\text{events}}\\\\) events: \\\\[P(\\\\text{HR}_\\\\text{true} > \\\\text{hr}_{\\\\text{irr}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{obs}}) = P\\\\bigl(\\\\log(\\\\text{HR}_\\\\text{true}) > \\\\log(\\\\text{hr}_\\\\text{irr})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{true})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{obs}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  helpText(\"Probabilty to observe a hazard ratio (\\\\(\\\\text{HR}_{\\\\text{obs}}\\\\)) resulting in a go-decision based on \\\\(n_{\\\\text{events}}\\\\) events, given a true hazard ratio (\\\\(\\\\text{hr}_{\\\\text{true}}\\\\)): \\\\[P(\\\\text{go}) = P(\\\\text{HR}_\\\\text{obs} < \\\\text{hr}_{\\\\text{go}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{true}}) = P\\\\bigl(\\\\log(\\\\text{HR}_\\\\text{obs}) < \\\\log(\\\\text{hr}_\\\\text{go})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{obs})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{true}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  helpText(\"Probabilty to observe a hazard ratio (\\\\(\\\\text{HR}_{\\\\text{obs}}\\\\)) resulting in a stop-decision based on \\\\(n_{\\\\text{events}}\\\\) events, given a true hazard ratio (\\\\(\\\\text{hr}_{\\\\text{true}}\\\\)): \\\\[P(\\\\text{stop}) = P(\\\\text{HR}_\\\\text{obs} > \\\\text{hr}_{\\\\text{stop}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{true}}) = P\\\\bigl(\\\\log(\\\\text{HR}_\\\\text{obs}) > \\\\log(\\\\text{hr}_\\\\text{stop})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{obs})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{true}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  helpText(\"Probabilty to observe a hazard ratio (\\\\(\\\\text{HR}_{\\\\text{obs}}\\\\)) resulting in a gray zone (neither go nor stop) on \\\\(n_{\\\\text{events}}\\\\) events, given a true hazard ratio (\\\\(\\\\text{hr}_{\\\\text{true}}\\\\)): \\\\[P(\\\\text{gray}) = P(\\\\text{hr}_{\\\\text{go}} < \\\\text{HR}_\\\\text{obs} < \\\\text{hr}_{\\\\text{stop}} | n_{\\\\text{events}}, \\\\text{hr}_{\\\\text{true}}) = P\\\\bigl(\\\\log(\\\\text{hr}_\\\\text{go}) < \\\\log(\\\\text{HR}_\\\\text{obs}) < \\\\log(\\\\text{hr}_\\\\text{stop})\\\\bigr); \\\\; \\\\log(\\\\text{HR}_\\\\text{obs})\\\\sim\\\\mathcal{N}\\\\left(\\\\log(\\\\text{hr}_{\\\\text{true}}),\\\\sqrt{\\\\frac{(1+r)^2}{r\\\\cdot n_{\\\\text{events}}}}\\\\right)\\\\]\"),\r\n                  h3(\"The selected design scenario (per slider input) and the compared scenarios (table) can be used to create a standard PowerPoint slide for decision boards (Summary Tab).\")\r\n                  ),\r\n                tabPanel(\"Posterior Probabilities\", \r\n                         plotlyOutput(\"postProb\", height = \"800px\")\r\n                         #uiOutput(\"postProb\")\r\n                         ),\r\n                tabPanel(\"Decision Probabilities\", \r\n                         plotlyOutput(\"descProb\", height = \"800px\")),\r\n                tabPanel(\"Summary\",\r\n                         fluidRow(\r\n                         textInput(\"slTitle\", \"Title for Standard PowerPoint Slide\", value = \"\", width=\"80%\",\r\n                                   placeholder = \"Enter a title for your PowerPoint Standard slide!\")\r\n                         ),\r\n                         fluidRow(\r\n                             column(6, h3(\"Balance correct / false decisions\", align = \"center\"),\r\n                                  reactableOutput(\"rtDescProbTab\"),\r\n#                                  uiOutput(\"descProbTab\"),\r\n                                  actionButton(\"saveButton\", \"Save .pptx\")\r\n                                  ),\r\n                           column(6,\r\n              h3(\"Posterior probability that true effect is at least minimal clinically relevant\", align=\"center\"),\r\n                                  plotOutput(\"ggPostProb\"))\r\n                          )\r\n                        )\r\n            ),           \r\n        ) # mainPanel end\r\n    ) # sidebarLayout end\r\n  )\r\n\r\n# Define server logic required to run the app for TTE 2-arm PoS\r\nserver <- function(input, output) {\r\n\r\n    observeEvent(input$HRpromirr, {\r\n        updateSliderInput(inputId = \"HRminrel\", min = input$HRpromirr[1], max=input$HRpromirr[2])\r\n    })\r\n    ScnSpecs <- reactive({\r\n        Post_TTE2a(hr.irr=input$HRpromirr[2], hr.rel=input$HRminrel, hr.prom=input$HRpromirr[1], \r\n                   hr.go=c(input$HRgostopMain[1], input$G1, input$G2, input$G3, input$G4, input$G5), \r\n                   hr.nogo=c(input$HRgostopMain[2], input$S1, input$S2, input$S3, input$S4, input$S5), \r\n                   n.events=c(input$EvtsMain, input$E1, input$E2, input$E3, input$E4, input$E5), \r\n                   r=c(input$randrat, input$rr1, input$rr2, input$rr3, input$rr4, input$rr5))\r\n    })\r\n    output$postProb <- renderPlotly(\r\n        plotPostProb(ScnSpecs(), hr.lim=input$HRlim, scn.y.sep=0.2, pl.height=paste0(400+nrow(ScnSpecs()$Scenarios)*200,\"px\"))\r\n    )\r\n    output$descProb <- renderPlotly(\r\n        plotDescProb(ScnSpecs(), hr.lim=input$HRlim, scn.y.sep=0.2, pl.height=paste0(400+nrow(ScnSpecs()$Scenarios)*200,\"px\"))        \r\n    )\r\n    output$rtDescProbTab <- renderReactable({\r\n        tableDescProb(ScnSpecs())\r\n    })\r\n#    output$descProbTab <- renderUI({htmltools_value(tableDescProb(ScnSpecs()))})\r\n    output$ggPostProb <- renderPlot({ggPostProb(ScnSpecs(), hr.lim=input$HRlim)})\r\n    observeEvent(input$saveButton, {\r\n      f <- file.choose(new=TRUE)\r\n      f <- strsplit(f, \".\", fixed=TRUE)[[1]]\r\n      f <- paste(f[-length(f)], \"pptx\", sep=\".\")\r\n      pptxSumm(ScnSpecs(), hr.lim=input$HRlim, templ=read_pptx(\"C:/Temp/template_TTE2a.pptx\"), file=f,\r\n               title=input$slTitle, tabFun=tableDescProb, graphFun=ggPostProb)\r\n      message(paste(\"Power Point standard slide saved at:\", f))\r\n    })\r\n  }\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"}]
